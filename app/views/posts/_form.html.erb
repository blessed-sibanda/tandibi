<% form_id = "poster-#{SecureRandom.hex(3)}" %>
<% thread = local_assigns[:thread] %>
<div class="poster bg-dark-700 flex p-3 my-2">
  <%= form_with model: Post.new, html: { id: form_id, multipart: true, class: 'w-full' } do |f| %>
    <%= f.hidden_field :postable_type, value: 'Status' %>
    <%= f.hidden_field :thread_id, value: thread&.id %>
    <div class="poster js-status-poster">
      <%= f.text_area :status_text, required: true, placeholder: "What's happening?",
                    class: 'bg-dark-700 w-full resize-none outline-none' %>
    </div>
    <% unless thread %>
      <div class="poster js-sight-poster hidden"></div>
    <% end %>
    <div class="pictures">
      <div class="picture-cont template">
        <img src="" alt="" class="picture">
      </div>
    </div>
    <div class="controls">
      <div class="options">
        <div class="switch option js-status-poster-switch active">
          <%= evil_icon 'ei-comment' %>
        </div>
        <div class="switch option js-sight-poster-switch">
          <%= evil_icon 'ei-location' %>
        </div>
        <div class="option js-pictures-uploader">
          <input type="file" name="post[pictures][]" id="picture_files" multiple accept="image/*" id="">
          <%= evil_icon 'ei-image' %>
        </div>
      </div>
      <div>
        <%= f.submit 'Say', class: 'submit-btn rounded-full text-gray-300 py-1 px-2 float-right w-full bg-indigo-800
    text-white shadow cursor-pointer md:w-16 hover:bg-indigo-700 hover:text-white' %>
      </div>
    </div>
  <% end %>
</div>
<script type="text/javascript" charset="utf-8">
  var switchActivePoster = (formElm, postableType) => {
      var postersElm = formElm.querySelectorAll(".poster");
      var switchesElm = formElm.querySelectorAll(".switch");
      var postTypeHiddenElm = formElm.querySelector("[name='post[postable_type]']");
  
      postersElm.forEach((elm) => elm.classList.add("hidden"));
      switchesElm.forEach((elm) => elm.classList.remove("active"));
  
      var posterCls = `.js-${postableType.toLowerCase()}-poster`;
      var switcherCls = `${posterCls}-switch`;
  
      formElm.querySelector(posterCls).classList.remove("hidden");
      formElm.querySelector(switcherCls).classList.add("active");
      postTypeHiddenElm.value = postableType;
  };
  
  
  var clickHandler = evt => {
    var formElm = evt.target.closest('form')
    var textareaElm = formElm.querySelector('textarea')
  
    if (evt.target && evt.target.classList.contains('icon')) {
        var parentElm = evt.target.parentElement
        var parentClasses = parentElm.classList
        if (parentClasses.contains('js-pictures-uploader')) {
            var fileElm = parentElm.querySelector("input[type='file']")
            fileElm.click()
        } else if (parentClasses.contains('js-sight-poster-switch')) {
            switchActivePoster(formElm, 'Sight')
            var submitBtnElm = formElm.querySelector("[type='submit']")
            submitBtnElm.value = 'Check in'
            submitBtnElm.style.width = '7rem'
            textareaElm.removeAttribute('required')
  
            // simple hack to make leaflet render map correctly
            setTimeout(function() {
                window.dispatchEvent(new Event('resize'))
            }, 250);
        } else if (parentClasses.contains('js-status-poster-switch')) {
            switchActivePoster(formElm, 'Status')
            var submitBtnElm =formElm.querySelector("[type='submit']")
            submitBtnElm.value = 'Say'
            submitBtnElm.removeAttribute('style')
            textareaElm.setAttribute('required', 'required')
        }
        return
    } else if (evt.target) {
        var parentElm = evt.target.parentElement
        var parentClasses = parentElm.classList
        if (parentClasses.contains('js-pictures-uploader')) {
            return
        }
        if (parentElm.closest('.sight-poster')) {
            return;
        }
    }
    textareaElm.focus()
    }
  
    var revokeImageBlobUrl = picturesElm => {
    var imgElms = picturesElm.querySelectorAll('img')
    for (var i = 0; i < imgElms.length; i++) {
        var imgElm = imgElms[i]
        var blobUrl = imgElm.getAttribute('src')
        if (blobUrl) {
            URL.revokeObjectURL(blobUrl)
        }
    }
    }
  
    var fileChangeHandler = evt => {
    var images = evt.target.files
    var formElm = evt.target.closest('form')
    var picturesElm = formElm.querySelector('.pictures')
    var templateElm = picturesElm.querySelector('.template')
    revokeImageBlobUrl(picturesElm)
    picturesElm.innerHTML = ''
    picturesElm.appendChild(templateElm)
    for (var i = 0; i < images.length; i++) {
        var image = images[i]
        var newPicContainerElm = templateElm.cloneNode(true)
        var newImgElm = newPicContainerElm.querySelector('img')
        if (!image.type.startsWith('image')) {
            continue
        }
        var imageUrl = URL.createObjectURL(image)
        newImgElm.setAttribute('src', imageUrl)
        newPicContainerElm.classList.remove('template')
        picturesElm.appendChild(newPicContainerElm)
    }
    }
  
    document.querySelector("#<%= form_id  %>").addEventListener('click', clickHandler, false)
    document.querySelector("#<%= form_id %> input[type='file']")
    .addEventListener('change', fileChangeHandler, false)
</script>
